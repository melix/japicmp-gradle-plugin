import japicmp.model.JApiChangeStatus
import japicmp.model.JApiClass
import japicmp.model.JApiCompatibility
import japicmp.model.JApiCompatibilityChange
import me.champeau.gradle.japicmp.report.AbstractContextAwareViolationRule
import me.champeau.gradle.japicmp.report.PostProcessViolationsRule
import me.champeau.gradle.japicmp.report.SetupRule
import me.champeau.gradle.japicmp.report.Violation
import me.champeau.gradle.japicmp.report.ViolationCheckContext
import me.champeau.gradle.japicmp.report.ViolationCheckContextWithViolations
import me.champeau.gradle.japicmp.report.ViolationRule

plugins {
    id 'java'
    id 'me.champeau.gradle.japicmp'
}

repositories {
    mavenCentral()
}

configurations {
    baseline
    current
}

dependencies {
    baseline 'org.apache.commons:commons-lang3:3.5'
    current 'org.apache.commons:commons-lang3:3.6'
}

task japicmpGeneric(type: me.champeau.gradle.japicmp.JapicmpTask) {
    oldClasspath.from(configurations.baseline)
    newClasspath.from(configurations.current)
    accessModifier = 'public'
    richReport {
        reportName = 'rich.html'
        description = 'A test of rich report'
        addRule(GenericRule)
    }
}

task japicmpStatus(type: me.champeau.gradle.japicmp.JapicmpTask) {
    oldClasspath.from(configurations.baseline)
    newClasspath.from(configurations.current)
    accessModifier = 'public'
    richReport {
        reportName = 'rich.html'
        description = 'A test of rich report'
        addRule(JApiChangeStatus.UNCHANGED, GenericRule)
    }
}

sourceSets {
    main2
}

task jarv2(type:Jar) {
    archiveClassifier = 'v2'
    from sourceSets.main2.output
}

task japicmpChange(type: me.champeau.gradle.japicmp.JapicmpTask) {
    oldClasspath.from(jar)
    newClasspath.from(jarv2)
    accessModifier = 'public'
    richReport {
        reportName = 'rich.html'
        description = 'A test of rich report'
        addRule(JApiCompatibilityChange.CLASS_NO_LONGER_PUBLIC, GenericRule)
        addSetupRule(MySetupRule)
        addPostProcessRule(MyTearDownRule)
        addRule(ContextAwareRule)
    }
}

class GenericRule implements ViolationRule {

    @Override
    Violation maybeViolation(final JApiCompatibility member) {
        if (member instanceof JApiClass && member.fullyQualifiedName in['A', 'org.apache.commons.lang3.text.WordUtils']) {
            Violation.info(member, "This class is deprecated")
        }
    }
}

class MySetupRule implements SetupRule {

    @Override
    void execute(final ViolationCheckContext violationCheckContext) {
        violationCheckContext.userData.executed = false
    }
}

class ContextAwareRule extends AbstractContextAwareViolationRule {

    @Override
    Violation maybeViolation(final JApiCompatibility member) {
        context.userData.executed = true
        assert context.className != null
        null
    }
}

class MyTearDownRule implements PostProcessViolationsRule {

    @Override
    void execute(final ViolationCheckContextWithViolations violationCheckContextWithViolations) {
        assert violationCheckContextWithViolations.userData.executed == true
        assert !violationCheckContextWithViolations.violations.isEmpty()
    }
}
