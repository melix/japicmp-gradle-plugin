import japicmp.filter.BehaviorFilter;
import japicmp.filter.FieldFilter;

import javassist.CtBehavior;
import javassist.CtField;
import javassist.Modifier;

plugins {
    id 'java'
    id 'me.champeau.gradle.japicmp'
}

repositories {
    mavenCentral()
}

sourceSets {
    main2
}

task jarv2(type: Jar) {
    classifier = 'v2'
    from sourceSets.main2.output
}


task japicmpAddCustomMatchTriggers(type: me.champeau.gradle.japicmp.JapicmpTask) {
    dependsOn jar, jarv2
    oldClasspath = files(jar.archivePath)
    newClasspath = files(jarv2.archivePath)
    txtOutputFile = file("$buildDir/reports/japi.txt")
    addExcludeFilter(MyCustomFilter)
}


task japicmpRemoveCustomMatchTriggers(type: me.champeau.gradle.japicmp.JapicmpTask) {
    dependsOn jar, jarv2
    oldClasspath = files(jarv2.archivePath)
    newClasspath = files(jar.archivePath)
    txtOutputFile = file("$buildDir/reports/japi.txt")
    addExcludeFilter(MyCustomFilter)
}


/**
 * Custom JAPICMP Filter that excludes volatile fields and synchronized methods.
 */
class MyCustomFilter implements FieldFilter, BehaviorFilter {

    @Override
    boolean matches(CtField ctField) {
        return Modifier.isVolatile(ctField.getModifiers())
    }

    @Override
    boolean matches(CtBehavior ctBehavior) {
        return Modifier.isSynchronized(ctBehavior.getModifiers())
    }
}
